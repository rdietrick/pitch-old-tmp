package com.pitchplayer.stats.om;

import com.pitchplayer.userprofiling.om.User;
// Generated Oct 21, 2007 12:24:53 PM by Hibernate Tools 3.2.0.b11



/**
 * GamePlayer generated by hbm2java
 */
public class GamePlayerRecord  implements java.io.Serializable {

	private static final Short ZERO = new Short((short)0);
	
     private GamePlayerId id;
     private User user;
     private GameRecord gameRecord;
     private byte seat;
     private Short score;
     private Byte winner;
     private Short jackPoints = ZERO;
     private Short gamePoints = ZERO;
     private Short ups = ZERO;
     private Short jackSteal = ZERO;
     private Short jackLoss = ZERO;
     
    public GamePlayerRecord() {
    }

	
    public GamePlayerRecord(GamePlayerId id, User user, GameRecord gameRecord, byte seat) {
        this.id = id;
        this.user = user;
        this.gameRecord = gameRecord;
        this.seat = seat;
    }
    public GamePlayerRecord(GamePlayerId id, User user, GameRecord gameRecord, byte seat, Short score, Byte winner, Short jackPoints, Short gamePoints, Short ups, Short jackSteal) {
       this.id = id;
       this.user = user;
       this.gameRecord = gameRecord;
       this.seat = seat;
       this.score = score;
       this.winner = winner;
       this.jackPoints = jackPoints;
       this.gamePoints = gamePoints;
       this.ups = ups;
       this.jackSteal = jackSteal;
    }
   
    public GamePlayerId getId() {
        return this.id;
    }
    
    public void setId(GamePlayerId id) {
        this.id = id;
    }
    public User getUser() {
        return this.user;
    }
    
    public void setUser(User user) {
        this.user = user;
    }
    public GameRecord getGameRecord() {
        return this.gameRecord;
    }
    
    public void setGameRecord(GameRecord gameRecord) {
        this.gameRecord = gameRecord;
    }
    public byte getSeat() {
        return this.seat;
    }
    
    public void setSeat(byte seat) {
        this.seat = seat;
    }
    public Short getScore() {
        return this.score;
    }
    
    public void setScore(Short score) {
        this.score = score;
    }
    public Byte getWinner() {
        return this.winner;
    }
    
    public void setWinner(Byte winner) {
        this.winner = winner;
    }
    public Short getJackPoints() {
        return this.jackPoints;
    }
    
    public void setJackPoints(Short jackPoints) {
        this.jackPoints = jackPoints;
    }
    public Short getGamePoints() {
        return this.gamePoints;
    }
    
    public void setGamePoints(Short gamePoints) {
        this.gamePoints = gamePoints;
    }
    public Short getUps() {
        return this.ups;
    }
    
    public void setUps(Short ups) {
        this.ups = ups;
    }
    public Short getJackSteal() {
        return this.jackSteal;
    }
    
    public void setJackSteal(Short jackSteal) {
        this.jackSteal = jackSteal;
    }


	public Short getJackLoss() {
		return jackLoss;
	}


	public void setJackLoss(Short jackLoss) {
		this.jackLoss = jackLoss;
	}


	/**
	 * Mark the player as having had the jack stolen by another player.
	 */
	public void addJackLoss() {
		setJackLoss(new Short((short) (getJackLoss()+1)));
	}


	/**
	 * Mark the player as having stolen the jack from another player.
	 */
	public void addJackSteal() {
		setJackSteal(new Short((short) (getJackSteal()+1)));		
	}


	/**
	 * Mark the player as having scored a jack point.
	 */
	public void addJackPoint() {
		setJackPoints(new Short((short) (getJackPoints()+1)));				
	}


	/**
	 * Mark the player as having scored a game point.
	 */
	public void addGamePoint() {
		setGamePoints(new Short((short) (getGamePoints()+1)));				
	}


	/**
	 * Adjusts the score (positively or negatively) by the amount specified.
	 * If the argument is positive, the number of "ups" will be incremented as well.
	 * @param i the number by which this player's score should be incremented.
	 */
	public void adjustScore(int i) {
		this.setScore(new Short((short)(getScore().intValue() + i)));
		if (i > 0) {
			this.ups = new Short((short) (ups.shortValue() + 1));
		}
	}


}


